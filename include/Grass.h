#ifndef __GRASS_H_
#define __GRASS_H_

#include "Model.h"
#include <vector>
#include <glm/glm.hpp>
#include <QImage>
#include <QColor>
#include "Camera.h"
#include "ShaderProgram.h"
#include "Texture.h"
#include "terraingen.h"


class Grass{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an enumorator to destinguish between sample types when generating grass
    //----------------------------------------------------------------------------------------------------------------------
    enum SampleType{G_HEGIHTMAP, G_MATSTACK};
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a constructor if we wish to create our grass from our material stack data structure
    //----------------------------------------------------------------------------------------------------------------------
    Grass(int _numGrass,  terrainGen::ElmT ** _matStack, int _sizeX, int _sizeY);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a constructor if we wish to create our grass from a heightmap
    //----------------------------------------------------------------------------------------------------------------------
    Grass(int _numGrass,  QImage _heightMap);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our defualt destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~Grass();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief function to generate our grass
    //----------------------------------------------------------------------------------------------------------------------
    void createGrass();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a method to set up our grass shader
    //----------------------------------------------------------------------------------------------------------------------
    void createShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a method to load MVP matricies to our grass shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader(glm::mat4 _modelMatrix, Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw our grass
    /// @warning oyou need to load the appropriate matricies to the shader first
    //----------------------------------------------------------------------------------------------------------------------
    void render();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the VAO of our grass model
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getVAO(){return m_model->getVAO();}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to get the height at a location in our material stack data structure
    //----------------------------------------------------------------------------------------------------------------------
    float getHeightFromMatStack(int _x, int _y);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a funtion to get return the normal of a location from our material stack data structure
    //----------------------------------------------------------------------------------------------------------------------
    glm::vec3 getNormalFromMatStack(int _xPos, int _yPos);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to calculate the height of a location from our height map
    //----------------------------------------------------------------------------------------------------------------------
    float getHeightFromTexture(int _width, int _depth);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to return the normal of a location from our height map
    //----------------------------------------------------------------------------------------------------------------------
    glm::vec3   getNormalFromHeightMap(int _xPos, int _yPos);
    //----------------------------------------------------------------------------------------------------------------------
    void updateGrass(QString _pathToHeightMap);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a setter for our max spawn height
    //----------------------------------------------------------------------------------------------------------------------
    inline void setMaxSpawnHeight(float _height){m_maxSpawnHeight = _height;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a setter for our min spawn height
    //----------------------------------------------------------------------------------------------------------------------
    inline void setMinSpawnHeight(float _height){m_minSpawnHeight = _height;}
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to store the max height our grass can spawn at
    //----------------------------------------------------------------------------------------------------------------------
    float m_maxSpawnHeight;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to store the minimum height our grass can spawn at
    //----------------------------------------------------------------------------------------------------------------------
    float m_minSpawnHeight;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to hold a pointer to our material stack data
    //----------------------------------------------------------------------------------------------------------------------
    terrainGen::ElmT ** m_matStackData;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a memeber to hold the size of our material stack data in the x diection
    //----------------------------------------------------------------------------------------------------------------------
    int m_matStackSizeX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a memeber to hold the size of our material stack data in the y diection
    //----------------------------------------------------------------------------------------------------------------------
    int m_matStackSizeY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to store our current sample type
    //----------------------------------------------------------------------------------------------------------------------
    SampleType m_sampleType;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to store our heightmap
    //----------------------------------------------------------------------------------------------------------------------
    QImage m_heightmap;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our grass shader program
    //----------------------------------------------------------------------------------------------------------------------
    ShaderProgram * m_grassShader;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our grass texture loaded to the shader
    //----------------------------------------------------------------------------------------------------------------------
    Texture *m_grassBladeTex;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our grass vertex shader
    //----------------------------------------------------------------------------------------------------------------------
    Shader *m_grassVert;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our grass gragment shader
    //----------------------------------------------------------------------------------------------------------------------
    Shader *m_grassFrag;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to hold our grass model
    //----------------------------------------------------------------------------------------------------------------------
    Model *m_model;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to hold how much grass we wish to generate
    //----------------------------------------------------------------------------------------------------------------------
    int m_numGrass;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a vertor to store all our grass postions
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec2> m_positions;
    //----------------------------------------------------------------------------------------------------------------------


};

#endif
