#ifndef TREES_H
#define TREES_H
#ifdef DARWIN
#include <GLFW/glfw3.h>
    #include <OpenGL/gl3.h>
#else
    #include <GL/glew.h>
    #include <GL/gl.h>
#endif
#include <QImage>
#include <QColor>
#include <glm/glm.hpp>
#include <Shader.h>
#include <ShaderProgram.h>
#include "Camera.h"
#include "Model.h"
#include "terraingen.h"


class Trees
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an enum to set our sample mode to create tree positions
    //----------------------------------------------------------------------------------------------------------------------
    enum sampleMode{T_HEIGHTMAP, T_MATSTACK};
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief default constructor
    //----------------------------------------------------------------------------------------------------------------------
    Trees(sampleMode _mode);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief default destructor
    //----------------------------------------------------------------------------------------------------------------------
    virtual ~Trees();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to create our trees
    //----------------------------------------------------------------------------------------------------------------------
    void createTrees();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a setter for our material stack member
    //----------------------------------------------------------------------------------------------------------------------
    inline void setMatStackData(terrainGen::ElmT ** _data, int _sizeX, int _sizeY){m_matStackData = _data; m_matStackSizeX = _sizeX; m_matStackSizeY = _sizeY;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a setter for our heightmap
    //----------------------------------------------------------------------------------------------------------------------
    inline void setHeightmap(QImage _heightmap){m_heightmap = _heightmap;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to query our heightmap at a location and return the height
    //----------------------------------------------------------------------------------------------------------------------
    float getHeightFromHeightMap(int _x, int _y);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to query our material stack data at a given position and return the height of the terrain at that location
    //----------------------------------------------------------------------------------------------------------------------
    float getHeightFromMatStack(int _x, int _y);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a setter to set the number of trees we wish to make
    //----------------------------------------------------------------------------------------------------------------------
    inline void setNumTrees(int _num){m_numTrees = _num;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to draw our trees
    //----------------------------------------------------------------------------------------------------------------------
    void render(GLuint _isBarkLoc);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a setter to set the max tree spawn height
    //----------------------------------------------------------------------------------------------------------------------
    inline void setMaxTreeHeight(float _max){m_maxTreeHeight = _max;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a setter to set the min tree spawn height
    //----------------------------------------------------------------------------------------------------------------------
    inline void setMinTreeHeight(float _min){m_minTreeHeight = _min;}
    //----------------------------------------------------------------------------------------------------------------------
    inline std::vector<glm::vec2> getPositions(){return m_positions;}
    void updateTrees(QString _pathToHeightMap);
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to store what sample mode to use
    //----------------------------------------------------------------------------------------------------------------------
    sampleMode m_mode;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to hold our terrain data in our material stack
    //----------------------------------------------------------------------------------------------------------------------
    terrainGen::ElmT ** m_matStackData;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an int to store the size of our material stack array size in the x direction
    //----------------------------------------------------------------------------------------------------------------------
    int m_matStackSizeX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an int to store the size of our material stack array size in the y direction
    //----------------------------------------------------------------------------------------------------------------------
    int m_matStackSizeY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to store our height map
    //----------------------------------------------------------------------------------------------------------------------
    QImage m_heightmap;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to store the max height our trees can spawn at
    //----------------------------------------------------------------------------------------------------------------------
    float m_maxTreeHeight;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to store the minimum height our trees can spawn at
    //----------------------------------------------------------------------------------------------------------------------
    float m_minTreeHeight;
    //----------------------------------------------------------------------------------------------------------------------


    // Tree model data
    bool m_billboards;
    Model *m_tree;
    Model *m_leaves;
    Model *m_billboard;
    // Number of trees to draw
    int m_numTrees;
    // Height and width of terrain
    std::vector<glm::vec2> m_positions;

    GLuint m_billVAO;

};

#endif // TREES_H
