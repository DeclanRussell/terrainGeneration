#ifndef MARCHINGCUBES_H
#define MARCHINGCUBES_H
//
// This is a modified version of Marching Cubes Example Program
// by Cory Bloyd (corysama@yahoo.com)
// Modified by Declan Russell 22/10/2014
//
// A simple, portable and complete implementation of the Marching Cubes
// and Marching Tetrahedrons algorithms in a single source file.
// There are many ways that this code could be made faster, but the
// intent is for the code to be easy to understand.
//
// For a description of the algorithm go to
// http://astronomy.swin.edu.au/pbourke/modelling/polygonise/
//
// This code is public domain.
//

#include <glm/vec3.hpp>
#include <vector>
#include <QImage>
#include "ShaderProgram.h"
#include "Texture.h"
#include "Camera.h"

#include "stdio.h"
#include "math.h"
//This program requires the OpenGL and GLUT libraries
// You can obtain them for free from http://www.opengl.org
#include "GL/glut.h"

#include "terraingen.h"
#include <iostream>


class marchingCubes
{
public:
    marchingCubes();
    ~marchingCubes();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a vec3 of GLfloats
    //----------------------------------------------------------------------------------------------------------------------
    struct GLvector
    {
            GLfloat fX;
            GLfloat fY;
            GLfloat fZ;
    };
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a structure to hold a vertex information
    //----------------------------------------------------------------------------------------------------------------------
    struct vertData{
        glm::vec3 vertex;
        glm::vec3 normal;
        glm::vec3 texCoord;
    };
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an enumorator so we can decide what sort of data we will be sampling from
    //----------------------------------------------------------------------------------------------------------------------
    enum sampleType{MCTEXTURE,MCSPHERE,MC_2DMATSTACK};
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief creates our points of our mesh with marching cubes
    //----------------------------------------------------------------------------------------------------------------------
    void vMarchingCubes();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief creates our points of our mesh with marching tetrahedrons
    //----------------------------------------------------------------------------------------------------------------------
    void vMarchingTetrahedrons();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a short class to export the created geometry as a obj
    //----------------------------------------------------------------------------------------------------------------------
    void exportGeometryObj(std::string _name);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a mutator to set our blend texture
    //----------------------------------------------------------------------------------------------------------------------
    inline void setBlendTex(QImage _tex){if(m_blendTexSet) delete m_blendTexture; m_blendTexture = new Texture(_tex);}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a setter to set our heightmap texture
    //----------------------------------------------------------------------------------------------------------------------
    inline void setHeightMap(QImage _heightMap){m_heightMap = _heightMap;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a mutator to set the sample mode of our marching cubes
    //----------------------------------------------------------------------------------------------------------------------
    inline void setMode(sampleType _mode){m_sampleMode = _mode;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief sets the pointer to the location of our 2 dimentional material stack information and registers the size of our data structer
    //----------------------------------------------------------------------------------------------------------------------
    inline void setMatStack(terrainGen::ElmT ** _matStackPtr, int _sizeX, int _sizeY){m_matStackData = _matStackPtr; m_matStackSizeX = _sizeX; m_matStackSizeY = _sizeY;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a setter to set our marching cubes sample size
    //----------------------------------------------------------------------------------------------------------------------
    inline void setSampleResolution(int _size){iDataSetSize = _size; fStepSize = 1.0/iDataSetSize;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to set how much our our data structure we wish to sample i.e. 0.5 will create terrain sampled from
    /// @brief the middle 50% of our data structure
    /// @warning only enter values between 0.0 and 1.0 or you will sample areas that are out of bounds
    //----------------------------------------------------------------------------------------------------------------------
    inline void setSampleSize(float _width, float _height){m_samplePercent.first = _width; m_samplePercent.second = _height;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to set what position we wish to have our sample taken from
    //----------------------------------------------------------------------------------------------------------------------
    inline void setSamplePos(float _xPercent, float _yPercent){m_samplePos.first = _xPercent; m_samplePos.second = _yPercent;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our draw function
    //----------------------------------------------------------------------------------------------------------------------
    void draw(glm::mat4 _modelMatrix, Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our vector of position data
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec3> m_position;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our vector of normals
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec3> m_normals;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our vector of texture coordinates
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec2> m_texCoords;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a accessor to our VAO
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getVAO(){return m_mCubesVAO;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to set up our shader
    //----------------------------------------------------------------------------------------------------------------------
    void createShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Set if drawn in wireframe
    //----------------------------------------------------------------------------------------------------------------------
    void setWireframe(bool _wireframe){m_wireframe = _wireframe;}
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief load our matricies to our shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader(glm::mat4 _modelMatrix, Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to allocate our geomtry data on the GPU
    //----------------------------------------------------------------------------------------------------------------------
    void allocateGeomtryData();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a handle to our VAO
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_mCubesVAO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief handles to our buffers
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_vboHandle[3];
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a boolean so we know if we have created our VAO
    //----------------------------------------------------------------------------------------------------------------------
    bool m_allocatedData;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to update our geometry data on the GPU
    //----------------------------------------------------------------------------------------------------------------------
    void updateGeometry();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our shader program
    //----------------------------------------------------------------------------------------------------------------------
    ShaderProgram *m_shaderProgram;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our vertex shader
    //----------------------------------------------------------------------------------------------------------------------
    Shader *m_vertexShader;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our fragment shader
    //----------------------------------------------------------------------------------------------------------------------
    Shader *m_fragmentShader;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our model view matrix location in our shader
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_modelViewLoc;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our projection matrix location in our shader
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_projLoc;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our normal matrix location in our shader
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_normalLoc;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our model view projection matrix location in our shader
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_modelViewProjectionLoc;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our mud texture
    //----------------------------------------------------------------------------------------------------------------------
    Texture *m_mudTex;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our grass texture
    //----------------------------------------------------------------------------------------------------------------------
    Texture *m_grassTex;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our rock texture
    //----------------------------------------------------------------------------------------------------------------------
    Texture *m_rockTex;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our snow texture
    //----------------------------------------------------------------------------------------------------------------------
    Texture *m_snowTex;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our 2D height map to blend with
    //----------------------------------------------------------------------------------------------------------------------
    Texture *m_blendTexture;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a bool to know if we have a blend texture set
    //----------------------------------------------------------------------------------------------------------------------
    bool m_blendTexSet;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to store how big a sample we wish to take from our data
    //----------------------------------------------------------------------------------------------------------------------
    std::pair<float,float> m_samplePercent;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a member to store which position in our data set we wish to start from
    //----------------------------------------------------------------------------------------------------------------------
    std::pair<float,float> m_samplePos;
    //----------------------------------------------------------------------------------------------------------------------
    GLvoid vSetTime(GLfloat fTime);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief selects the correct sample function to use based on the sample mode set
    //----------------------------------------------------------------------------------------------------------------------
    GLfloat fSample(GLfloat fX, GLfloat fY, GLfloat fZ);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief calculates if a point is inside or outside of a material in our EPIC material stack data structure
    /// @param fX - x location of the point
    /// @param fY - Y location of the point
    /// @param fZ - Z location of the point
    /// @returns -1 if inside a material and 1 if outside i.e. in AIR
    //----------------------------------------------------------------------------------------------------------------------
    GLfloat matStackSample(GLfloat fX, GLfloat fY, GLfloat fZ);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief calculates if a point is higher of lower than the values in the heightmap
    /// @param fX - x location of the point
    /// @param fY - Y location of the point
    /// @param fZ - Z location of the point
    /// @returns -1 if point is below terrain, 0 if level with terrain and 1 if above terrain
    //----------------------------------------------------------------------------------------------------------------------
    GLfloat textureSample(GLfloat fX, GLfloat fY, GLfloat fZ);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief calculates if a point inside the given sphere equation
    /// @param fX - x location of the point
    /// @param fY - Y location of the point
    /// @param fZ - Z location of the point
    /// @returns -1 if point is inside sphere, 0 if on sphere and 1 if outside the sphere
    //----------------------------------------------------------------------------------------------------------------------
    GLfloat sphereSample(GLfloat fX, GLfloat fY, GLfloat fZ);
    //----------------------------------------------------------------------------------------------------------------------
    void vMarchCube1(GLfloat fX, GLfloat fY, GLfloat fZ, GLfloat fScale); // Marching Cubes
    //----------------------------------------------------------------------------------------------------------------------
    void vMarchCube2(GLfloat fX, GLfloat fY, GLfloat fZ, GLfloat fScale); // Marching Tetrahedrons
    //----------------------------------------------------------------------------------------------------------------------
    void vMarchTetrahedron(GLvector *pasTetrahedronPosition, GLfloat *pafTetrahedronValue);
    //----------------------------------------------------------------------------------------------------------------------
    GLvoid vGetNormal(GLvector &rfNormal, GLfloat fX, GLfloat fY, GLfloat fZ);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to get the normal of as a input position from material stack data
    /// @warning there must be a material stack set before this is run or it will most likely crash
    //----------------------------------------------------------------------------------------------------------------------
    GLvoid vGetMatStackNormal(GLvector &rfNormal, GLfloat fX, GLfloat fY, GLfloat fZ);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a function to get the normal of a height map from a texture
    /// @warning there must be a texture set before this is run or it will most likely crash
    //----------------------------------------------------------------------------------------------------------------------
    GLvoid vGetTextureNormal(GLvector &rfNormal, GLfloat fX, GLfloat fY, GLfloat fZ);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the original normal calculation function that came with the marching cubes source code
    //----------------------------------------------------------------------------------------------------------------------
    GLvoid vDefaultGetNormal(GLvector &rfNormal, GLfloat fX, GLfloat fY, GLfloat fZ);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief just a simple normalising function
    //----------------------------------------------------------------------------------------------------------------------
    GLvoid vNormalizeVector(GLvector &rfVectorResult, GLvector &rfVectorSource);
    //----------------------------------------------------------------------------------------------------------------------
    GLfloat fGetOffset(GLfloat fValue1, GLfloat fValue2, GLfloat fValueDesired);
    //----------------------------------------------------------------------------------------------------------------------
    GLint     iDataSetSize;
    //----------------------------------------------------------------------------------------------------------------------
    GLfloat   fStepSize;
    //----------------------------------------------------------------------------------------------------------------------
    GLfloat   fTargetValue;
    //----------------------------------------------------------------------------------------------------------------------
    GLfloat   fTime;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores our created geometry
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec3> m_createdGeometry;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the heightmap we will use for sampling data
    //----------------------------------------------------------------------------------------------------------------------
    QImage m_heightMap;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the current sample mode
    //----------------------------------------------------------------------------------------------------------------------
    sampleType m_sampleMode;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores a pointer to our material stack terrain data
    //----------------------------------------------------------------------------------------------------------------------
    terrainGen::ElmT ** m_matStackData;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores how large our 2 dimentional material stack array is in the X direction
    //----------------------------------------------------------------------------------------------------------------------
    int m_matStackSizeX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores how large our 2 dimentional material stack array is in the Y direction
    //----------------------------------------------------------------------------------------------------------------------
    int m_matStackSizeY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set to draw in wireframe
    //----------------------------------------------------------------------------------------------------------------------
    bool m_wireframe;
    //----------------------------------------------------------------------------------------------------------------------
};

#endif // MARCHINGCUBES_H
